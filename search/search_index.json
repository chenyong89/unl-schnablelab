{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the <code>schnablelab</code> Package","text":"<p>The schnablelab package comprises code developed by Chenyong Miao during his PhD at the Schnable Lab, University of Nebraska-Lincoln, spanning from 2016 to 2020. This code primarily supported Chenyong's research activities in high-throughput phenotyping/genotyping, and genome-wide association studies (GWAS). The functionality has been encapsulated into command-line tools to facilitate analyses on both local computers and the HCC (Holland Computing Center) campus server. The package is structured into distinct modules, each containing several scripts that encompass multiple functions tailored for specific tasks. The general command-line usage adheres to the following pattern:</p> <pre><code>$ python -m schnablelab.[MODULE].[SCRIPT] [ACTION]\n</code></pre> <p>To tuilize this pakcage, please follow the installation page for initial setup instructions.</p>"},{"location":"#autogwas-module","title":"autoGWAS module","text":"<p>This module facilitates data preparation, conducts GWAS using various statistical models, and analyzes GWAS results.</p> <pre><code>$ python -m schnablelab.autoGWAS\nUsage:\n    python -m schnablelab.autoGWAS.SCRIPT\n\n\nAvailable SCRIPTs:\n    data_pipeline | Data QA/QC before conducting GWAS\n             gwas | Conduct GWAS using various algorithms\n        post_gwas | Post-GWAS analyses\n</code></pre>"},{"location":"#genotyping-module","title":"genotyping module","text":"<p>This module contains SNP calling pipelines</p> <pre><code>$ python -m schnablelab.genotyping\nUsage:\n    python -m schnablelab.genotyping.SCRIPT\n\n\nAvailable SCRIPTs:\n     pre_snp_calling | Get files ready for SNP calling\n         snp_calling | Call SNPs on high throughput sequencing data using GATK, Freebayes, SAMtools\n    post_snp_calling | Post SNP calling functions\n</code></pre>"},{"location":"#phenotyping-module","title":"phenotyping module","text":"<p>This module processes high-throughput phenotyping data generated from the UNL Greenhouse Innovation Center.</p> <pre><code>$ python -m schnablelab.phenotyping\nUsage:\n    python -m schnablelab.phenotyping.SCRIPT\n\n\nAvailable SCRIPTs:\n       extract_traits | Extract sorghum inflorescence width and height, stem height, and plant height\n             htp_data | Utils to deal with high throughput phenotyping data\n    plot_growth_curve | Plot time-series traits extracted from sorghum RGB images\n</code></pre>"},{"location":"#zooniverse-module","title":"zooniverse module","text":"<p>This module features a single script, <code>zookeeper</code>, designed to upload and download data to/from the Zooniverse crowdsourcing platform.</p> <pre><code>$ python -m schnablelab.zooniverse.zookeeper\nUsage:\n    python -m schnablelab.zooniverse.zookeeper ACTION\n\n\nAvailable ACTIONs:\n             toy | Random pick up some images for testing purporse\n          divide | Divide a large number of images to several subsets\n          upload | Load images to zooniverse\n    batch_upload | Upload multiple dirs on HCC to zooniverse\n          export | Get annotation and other exports\n        manifest | Generate a manifest for zooniverse subject set upload\n</code></pre>"},{"location":"#gc-genotype-corrector-module","title":"GC (Genotype-Corrector) module","text":"<p>GC is a bioinformatics tool used to impute missing data and correct erroneous genotype calls in bi-parental populations. For more details, refer to our publication. Detailed tutorials on conducting GC with your own data can be found here.</p> <pre><code>$ python -m schnablelab.GC\nUsage:\n    python -m schnablelab.GC.SCRIPT\n\n\nAvailable SCRIPTs:\n      data_qc | Perform data QC before running Genotype-Corrector\n    corrector | Correct Genotype Calls in biparental populations\n</code></pre>"},{"location":"#hcc-module","title":"hcc module","text":"<p>The hcc module provides convenient tools for analyses conducted on the HCC.</p> <pre><code>$ python -m schnablelab.hcc\nUsage:\n    python -m schnablelab.hcc.SCRIPT\n\n\nAvailable SCRIPTs:\n         job | Create, submit, canceal jobs\n     request | Request a node\n    traverse | Traverse files to avoid purge policy on hcc\n</code></pre> <p>Please note that most of the code in this repository was developed over four years ago. Some scripts, particularly those related to HCC, may no longer be compatible with the updates to the campus server since my graduation in 2020. I apologize for any outdated or inefficient code that may still be present in the package.</p> <ul> <li>Chenyong Miao</li> <li>06/23/2024</li> </ul>"},{"location":"gc_tutorial/","title":"Genotype-Corrector Tutorial","text":""},{"location":"gc_tutorial/#step-1-prepare-genotype-data-to-the-required-data-format","title":"Step 1: Prepare Genotype Data to the Required Data Format","text":"<p>The input genotype table is a tab-delimited text file containing genotypes for each sample/line in a population. Markers must be sorted by position within each chromosome or contig. A typical input genotype table format for GC should resemble the following: </p> <p>If your genotype data is in VCF format, you can use the following command-line tool to convert it to the required format: <pre><code>$ python -m schnablelab.GC.data_qc vcf2map input.vcf output.map\n</code></pre></p>"},{"location":"gc_tutorial/#step-2-quality-control-qc-on-genotype-data","title":"Step 2: Quality Control (QC) on Genotype Data","text":"<p>Several QC steps are necessary before proceeding to the correction step. Example data for this demo can be found in the repository data directory.</p>"},{"location":"gc_tutorial/#qc-on-missing-data","title":"QC on Missing Data","text":"<p>This step removes SNPs and samples with a higher-than-specified missing data ratio (<code>--cutoff_snp</code> and <code>--cutoff_sample</code>).</p> <p><pre><code>$ python -m schnablelab.GC.data_qc qc_missing RIL_X0.4miss0.35.map qc_missing.map --cutoff_snp 0.4 --cutoff_sample 0.4\n</code></pre> Here, <code>RIL_X0.4miss0.35.map</code> is an example input genotype table, and <code>qc_missing.map</code> is the resulting table after removing high missing ratio SNPs and samples.</p>"},{"location":"gc_tutorial/#qc-on-snps-with-distorted-segregation-ratio","title":"QC on SNPs with Distorted Segregation Ratio","text":"<p>This step removes SNPs with highly distorted segregation ratios. </p> <p><pre><code>$ python -m schnablelab.GC.data_qc qc_sd qc_missing.map qc_segregation.map --population RIL\n</code></pre> In this command, <code>qc_missing.map</code> is the table from the previous QC step, and <code>qc_segregation.map</code> is the resulting table.</p>"},{"location":"gc_tutorial/#qc-on-homozygous-genotype-calls-in-heterozygous-regions","title":"QC on Homozygous Genotype Calls in Heterozygous Regions","text":"<p>This step identifies small regions (defined by read length in base pairs) where continuous homozygous genotype calls occur within a heterozygous region.</p> <p><pre><code>$ python -m schnablelab.GC.data_qc qc_hetero qc_segregation.map qc_hetero.map --read_len 150\n</code></pre> Here, <code>qc_segregation.map</code> is the table from the previous QC step, and <code>qc_hetero.map</code> is the resulting table. The process also generates a log file <code>GC.qc_hetero.info</code> detailing aggregated regions.</p>"},{"location":"gc_tutorial/#qc-on-duplicated-snp-markers","title":"QC on Duplicated SNP Markers","text":"<p>This step aggregates consecutive markers with identical genotype calls across all samples/lines.</p> <p><pre><code>$ python -m schnablelab.GC.data_qc qc_dup qc_hetero.map qc_dup.map\n</code></pre> In this command, <code>qc_hetero.map</code> is the table from the previous QC step, and <code>qc_dup.map</code> is the resulting table. Use <code>--diff_num</code> to specify the number of tolerated different genotype calls between consecutive SNP markers (default is 0). Aggregation information is logged in <code>GC.qc_dup.log</code>.</p>"},{"location":"gc_tutorial/#step-3-conduct-the-correction","title":"Step 3. Conduct the Correction","text":""},{"location":"gc_tutorial/#prepare-the-configuration-file","title":"Prepare the Configuration File","text":"<p>The configuration file defines parameters for the correction step. An example config file can be found here. You can modify it based on your own input data. </p>"},{"location":"gc_tutorial/#run-genotype-corrector","title":"Run Genotype-Corrector","text":"<p>Once you have the genotype table after QC and the configuration file, run Genotype-Corrector using:</p> <pre><code>$ python -m schnablelab.GC.corrector correct config.txt qc_dup.map --itertimes 5\n</code></pre> <p>Upon completion, the corrected genotype table <code>qc_dup.corrected.map</code> will be generated where missing values are imputed and genotype calls are corrected. Adding <code>--debug</code> parameter to above command line will generate an output table <code>qc_dup.corrected.map.debug</code> containing both corrected genotype calls followed by the original ones highlighted in parentheses as shown below. </p> <p></p> <p>You can manually debug results if you found obvious wrong corrections by GC in this file. After debugging, you can run <code>python -m schnablelab.GC.corrector cleanup</code> command to remove redudant info in the table. For conversion to other formats (e.g., R/QTL or MSTmap), use <code>python -m schnable.GC.corrector format</code> for downstream analyses.</p>"},{"location":"gc_tutorial/#tips","title":"Tips","text":"<ul> <li>GC performs best with high-density marker datasets from high-throughput sequencing, where each contig should have at least hundreds of markers.</li> <li>Some missing values and genotype call corrections may not be performed by GC without strong supporting evidence.</li> <li>Grid search of input parameters (e.g., sliding window size) is recommended to achieve optimized results.</li> </ul>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#step-1-download-code-from-github","title":"step 1. download code from github","text":"<pre><code>git clone git@github.com:chenyong89/unl-schnablelab.git\n\ncd unl-schnablelab\n</code></pre>"},{"location":"installation/#step-2-install-schnablelab-package-using-pip","title":"step 2. install <code>schnablelab</code> package using pip","text":"<pre><code>pip install .\n</code></pre>"},{"location":"installation/#step-3-add-package-dir-path-to-pythonpath-to-start-using-command-line-tools","title":"step 3. add package dir path to PYTHONPATH to start using command line tools","text":"<pre><code># add following line to ~/.bashrc\nexport PYTHONPATH=\"$PYTHONPATH:/path/to/unl-schnablelab/src\"\n</code></pre>"}]}